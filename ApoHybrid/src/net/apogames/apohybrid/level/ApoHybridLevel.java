package net.apogames.apohybrid.level;

public class ApoHybridLevel {

	/**
	 * 0 = empty
	 * 1 = goal
	 * 2 = dice with no moves
	 * 3 = dice with 1 moves
	 * 4 = dice with 2 moves
	 * 5 = dice with 3 moves
	 * 6 = dice with 4 moves
	 * 7 = dice with 5 moves
	 * 8 = dice with 6 moves
	 * a = dice with no moves and goal down
	 * b = dice with 1 moves and goal down
	 * c = dice with 2 moves and goal down
	 * d = dice with 3 moves and goal down
	 * e = dice with 4 moves and goal down
	 * f = dice with 5 moves and goal down
	 * g = dice with 6 moves and goal down
	 */

	//#ifdef DiceGameLogic
	private static final String[] levelsString = new String[] {	
		"00000000"+
		"00000000"+
		"04000050"+
		"00100000"+
		"00000100"+
		"00310000"+
		"00000000"+
		"00000000",
		
		"0000000000000000000000000040000000311000000000000000000000000000",
		
		"00000000" +
		"00000000" +
		"00000000" +
		"00040000" +
		"00103000" +
		"00010000" +
		"00000000" +
		"00000000",
		
		"0000000000000000000000000013100000000000004150000000000000000000",
		
		"00000000"+
		"00000000"+
		"00031000"+
		"00041000"+
		"00015000"+
		"00016000"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00000000"+
		"00041400"+
		"00000000"+
		"00015100"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00005000"+
		"00611000"+
		"00011400"+
		"00030000"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00014100"+
		"00004000"+
		"00311130"+
		"00005000"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00016100"+
		"00041000"+
		"00001400"+
		"00006000"+
		"00000000"+
		"00000000",
		
		"00500300"+
		"00100100"+
		"00064000"+
		"00011000"+
		"04000040"+
		"03111130"+
		"00000000"+
		"00000000",
		
		"0000000000000000000000000001100000311300043113400000000000000000",
		
		"0000000000000000000110000031150000400400005003000001100000000000",
		
		"00000000"+
		"00503050"+
		"00011100"+
		"00310130"+
		"00011100"+
		"00503050"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00000000"+
		"00010500"+
		"00061000"+
		"00010500"+
		"00000000"+
		"00000000",
		
		"00000000000000000005000000040000011b1100000400000005000000000000",
		
		"00000000"+
		"00000000"+
		"00054000"+
		"00411500"+
		"00145100"+
		"00011000"+
		"00000000"+
		"00000000",
		
		"0000000000000000000300000031100000010140000015000000400000000000",
		
		"0000000000000000004131000010040000300100001415000000000000000000",
		
		"0000000000000000000400000031300004111400000100000000000000000000",
		
		"0000000000431000003110000011330003311000001130000013400000000000",
		
		"0000000000000000003b0c40000101000004430000b000b00001110000000000",
		
		"0000000000014000001315000131514004151310005131000004100000000000",
		
		"0000000000000000041814000161610008101800016161000418140000000000",
		
		"0000000000140000005100000013150000416100000014000000510000000000",
		
		"00000000"+
		"00013400"+
		"00151540"+
		"00111440"+
		"00113050"+
		"00011300"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00413160"+
		"00100010"+
		"00361030"+
		"00100010"+
		"00613140"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"00050100"+
		"00001500"+
		"00015000"+
		"00100000"+
		"00000000"+
		"00005000",
		
		"00000000"+
		"01030000"+
		"00500100"+
		"00107000"+
		"06001000"+
		"00010400"+
		"00000000"+
		"00000000",
		
		"00000000"+
		"00000000"+
		"10401030"+
		"0d0e0d00"+
		"30104010"+
		"00000000"+
		"00000000"+
		"00000000",
		
		"00040000"+
		"00000000"+
		"00d1d000"+
		"301b1030"+
		"00e1e000"+
		"00000000"+
		"00040000"+
		"00000000",
	};

	//#elifdef SnakeGameLogic
//@	private static final String[] levelsString = new String[] {
//@			"de"+
//@			"0000"+
//@			"0660"+
//@			"0650"+
//@			"0666"+
//@			"0001",
//@		
//@//			"de"+
//@//			"5555"+
//@//			"0666"+
//@//			"5005"+
//@//			"6660"+
//@//			"3555",
//@			
//@			"ed"+
//@			"56000"+
//@			"56b65"+
//@			"06060"+
//@			"0h064",
//@			
//@			"gd"+
//@			"5056b0b"+
//@			"0606060"+
//@			"0606660"+
//@			"4650b6b",
//@			
//@			"ee"+
//@			"50005"+
//@			"06560"+
//@			"05450"+
//@			"06560"+
//@			"50005",
//@			
//@			"cchi5c36b5b",
//@			
//@			"cf"+
//@			"0bc"+
//@			"0c0"+
//@			"bab"+
//@			"545"+
//@			"060"+
//@			"650",
//@
//@			"ddebbb6ii656b5b65i",
//@			
//@//			"ge"+
//@//			"00bcb0b"+
//@//			"0ccccc0"+
//@//			"00b666b"+
//@//			"ccccbcb"+
//@//			"000646a",
//@			
//@			"efcihiccccccbiiibbigibiiiiibbabb",
//@			
//@			"fhb000000ccccc0cbbbb0cbc2b0cbabb0cb6bb00ccc50cbbbb",
//@			
//@			"gg00c0c000hhhhh0chihihc0hhghh0chihihc0hhhhh000c0c00",
//@			
//@			"eg"+
//@			"05450"+
//@			"06660"+
//@			"06060"+
//@			"05550"+
//@			"5ccc5"+
//@			"66566"+
//@			"06460",
//@			
//@			"ggh60006h60i0i0660ihi0650hgh0560ihi0660i0i06h60006h",	
//@
//@			"ee5i5cb6i6c6hi5c56i6c6hi5c4",
//@			
//@			"gghcbbbchhc666chhc646chhc666chhcbabchhccccchicbbbci",
//@			
//@			"hc"+
//@			"06b60c5c"+
//@			"b5456b0b"+
//@			"06b60c5c",
//@			
//@			"ee5b5b6b5b6b5b6b566b5bg65b5",
//@			
//@			"dffh655h666655b6546666ihhh",
//@			
//@			"eeh25bhb6i659cbc7hi6ib5bhg5",
//@			
//@			"cjch15ch9bchc5cbd5ch3bchc5ch75ch",
//@			
//@			"edcccechcbchcc6h00h4i5",
//@			
//@			"eebh5b65666bc626hcb6hiabihi",
//@			
//@			"ggbhb5hbhh8iciebbciciihh66666bbcc6cchh6c4c6bbh555bh",
//@			
//@			"ic65chc5chi3c5bcb5cd6hc5chc5i",
//@			
//@			"hechb565hb566cbi61h5iib6c7bbbcbi6dh665hbbi",
//@			
//@			"ee05cb00hc50cc20b59c560ihih",
//@			
//@			"fe"+
//@			"b555bc"+
//@			"b565bc"+
//@			"b455ac"+
//@			"h666ch"+
//@			"i6555i",
//@			
//@			"fd855558b6ii6b55cc555h665h",
//@			
//@			"ghibehicbbb656bhbiei6bib666bcbb666bcb0cac6hhb06bcbbcba0ci5",
//@			
//@			"ehc666i6bbb6hacb56bbb5hi6i56b6b4h626icb6bi",
//@			
//@			"fe"+
//@			"c5c556"+
//@			"cbbcii"+
//@			"h6b6ie"+
//@			"h4a5ii"+
//@			"h655bb",
//@	};

	//#elifdef ClockGameLogic
	private final static String[] levelsString = new String[] {
			"90, 262, 50, -50, 15, 250, 100, 50, 270, 10, 410, 262, 50, -230, 15, 250, 405, 50, 90, 10",
			"130, 230, 25, -50, 10, 130, 285, 25, 75, 12, 185, 230, 25, 129, 9, 155, 400, 50, -345, 11, 310, 255, 50, 64, 12, 335, 375, 25, 65, 7, 335, 430, 25, -302, 8, 280, 430, 25, 260, 9",
			"296,114,40,-50,8,186,438,40,140,8,200,200,30,210,10,200,347,30,320,7,290,347,30,-270,10,290,200,30,-270,7,200,272,30,0,11,290,272,30,90,10",
			"250, 260, 50, 67, 15, 170, 235, 20, -270, 12, 170, 285, 20, 130, 10, 215, 185, 20, 310, 5, 275, 185, 20, -245, 8, 325, 235, 20, 169, 7, 325, 285, 20, 237, 11, 215, 335, 20, -349, 7, 275, 335, 20, 198, 9",
			"169,155,40,180,7,337,158,40,179,7,253,262,30,-345,9,157,360,35,-182,13,247,428,35,-357,10,337,360,36,354,12",
			"100,258,40,-224,8,182,355,40,193,11,133,93,50,-76,11,337,165,60,60,6,384,347,50,-245,11,39,365,30,-191,6",
			"100,454,40,-5,12,100,351,40,-142,10,100,246,40,339,7,159,138,40,-164,10,250,71,40,130,11,332,138,40,142,9,393,246,40,41,8,393,351,40,249,13,393,455,40,-11,8,251,351,60,-229,7",
			"150, 260, 20, 123, 8, 150, 315, 20, -275, 7, 205, 205, 20, -354, 6, 205, 260, 20, -15, 9, 205, 315, 20, 10, 8, 205, 370, 20, 219, 7, 260, 205, 20, 123, 5, 260, 260, 20, -310, 6, 260, 315, 20, 20, 9, 260, 370, 20, 270, 8, 315, 260, 20, 195, 5, 315, 315, 20, 54, 7",
			"90, 262, 40, 120, 10,400, 100, 30, 160, 12, 410, 400, 20, 320, 8",
			"95,260,20,-53,8,95,320,20,244,4,399,260,20,-259,6,399,320,20,350,6,210,150,20,-40,9,280,150,20,-121,11,210,430,20,-65,13,280,430,20,19,11",
			"121,179,30,-46,4,78,244,30,38,4,63,319,30,207,4,146,319,30,145,13,226,319,30,-125,6,226,243,30,-348,13,226,396,30,135,6,226,470,30,-79,6,302,319,30,-26,10,172,117,30,-209,6",
			"240, 262, 20, 256, 10, 25, 50, 20, 121, 6, 30, 100, 25, 15, 9, 85, 55, 25, -312, 10, 435, 525, 20, 301, 7, 430, 475, 25, 15, 9, 375, 520, 25, -312, 10",
			"95,100,40,270,7,183,195,40,-130,10,280,284,40,-310,6,370,373,40,90,8,100,195,20,-48,8,183,100,20,-140,9,185,289,20,-180,7,282,369,20,17,4,371,273,20,-140,9,294,182,20,280,7",
			"60,239,30,204,13,61,329,30,72,5,119,435,30,64,12,220,439,30,-308,13,320,440,30,-319,12,404,335,30,169,8,399,242,30,7,5,320,136,30,-348,7,221,136,30,-263,11,119,136,30,243,4,145,289,20,-164,5,232,215,20,-206,4,315,298,20,218,5,233,365,20,-273,7,232,286,12,214,10",
			"241,463,20,117,7,289,410,20,159,6,329,353,20,82,4,363,297,20,124,7,398,243,20,246,5,438,196,20,-142,9,192,413,20,199,8,153,357,20,-124,5",
			"86,261,35,-124,4,86,345,35,96,9,422,345,35,-17,12,422,261,35,247,6,196,95,35,58,10,298,95,35,-137,12,196,504,35,-274,7,298,504,35,-295,11,200,419,18,336,4,332,344,18,166,11,302,173,18,178,11,179,259,18,45,13",
			"90,100,40,192,11,420,100,40,-112,8,90,500,40,-260,6,420,500,40,-341,7,180,260,20,141,10,180,310,20,-198,8,240,206,20,191,4,290,205,20,273,9,240,370,20,178,11,291,370,20,-123,13,344,260,20,-134,8,344,310,20,-41,5",
			"89,265,60,168,13,151,380,55,-43,12,235,468,50,273,7,341,416,45,-120,12,403,334,40,352,7,405,241,35,323,7,363,166,30,30,4,300,115,25,-254,4,236,102,20,267,5,180,121,15,-146,9,145,156,12,-252,9",
			"254,435,30,-222,11,170,434,30,207,8,333,435,30,-179,11,170,151,30,56,9,254,151,30,-230,7,333,151,30,123,8,106,263,20,-338,8,155,263,20,-323,13,106,313,20,-203,4,156,313,20,349,6,345,263,20,-278,11,345,313,20,51,9,399,263,20,-36,9,399,313,20,157,9,215,526,35,47,8,299,526,35,304,13,206,75,35,-171,10,300,75,35,-227,4",
			"80,250,30,357,6,80,330,30,144,11,170,422,30,-243,5,250,422,30,-53,12,170,154,30,350,13,250,154,30,284,8,346,250,30,128,4,346,330,30,-122,6,114,98,20,-16,10,174,62,20,85,6,235,62,20,-244,13,292,98,20,272,9,109,477,20,-50,11,174,523,20,-177,10,235,523,20,-243,10,293,481,20,-270,12",
			"240,94,20,-356,6,240,165,30,184,12,240,354,30,-178,9,240,430,20,232,7,332,260,30,165,4,405,260,20,-152,6,150,260,30,-335,4,82,260,20,170,9,240,260,40,-162,3",
			"254,85,40,72,5,148,86,40,-157,9,145,183,40,-292,6,53,182,40,-92,11,59,280,40,23,10,418,336,40,58,4,419,432,40,268,6,328,432,40,244,9,329,525,40,-82,10,238,525,40,-45,10,71,472,25,-242,9,131,417,25,95,8,194,357,25,214,10,403,135,25,341,10,354,194,25,33,7,300,246,25,-10,7,246,305,25,36,13",
			"349,164,30,-227,11,280,105,30,-128,10,198,78,30,33,7,119,105,30,-19,10,60,161,30,-223,5,55,237,30,326,4,122,290,30,-80,9,203,321,30,223,4,288,348,30,-282,10,341,413,30,-228,4,306,486,30,-243,4,229,516,30,293,13,150,513,30,107,8,79,481,30,339,5",
			"114,127,33,-215,5,115,213,23,104,11,116,316,46,262,9,213,69,31,136,12,204,422,39,215,5,325,402,40,-209,10,369,309,27,267,11,336,112,55,227,4,368,224,22,-135,4,240,260,36,269,4",
			"50, 130, 30, -123, 10, 120, 130, 30, 234, 8, 190, 200, 30, -310, 9, 120, 270, 30, 310, 7, 190, 340, 30, 10, 8, 120, 410, 30, -219, 9, 50, 410, 30, 141, 8, 370, 130, 30, 265, 7, 300, 200, 30, -345, 8, 440, 200, 30, -50, 5, 300, 270, 30, 123, 6, 440, 270, 30, 321, 7, 300, 340, 30, -298, 9, 440, 340, 30, 245, 8, 370, 410, 30, -300, 4",
			"94,261,20,253,8,136,123,20,71,11,308,123,20,-40,13,136,453,20,37,8,308,453,20,-76,9,376,308,20,-213,7",
			"90, 262, 50, 90, 9, 245, 150, 12, 210, 5, 400, 262, 50, -270, 8, 245, 380, 12, -170, 11",
			"151,78,35,-309,8,236,64,20,-228,9,220,121,20,-190,8,153,148,20,-216,8,321,249,40,-320,10,216,356,40,107,10,368,539,35,39,7,368,463,20,-32,9,308,488,20,-315,7,288,550,20,-329,13,202,247,20,191,8,329,360,20,210,11,267,304,20,239,12",
			"93,154,20,28,11,49,203,20,266,5,41,264,20,109,6,57,321,20,142,13,101,373,20,17,7,145,154,20,153,11,145,208,20,335,8,145,267,20,-164,12,147,325,20,-163,10,148,373,20,-173,9,194,374,20,-33,6,457,168,20,5,7,431,212,20,3,10,387,267,20,163,7,387,212,20,142,6,387,162,20,-256,4,387,324,20,-248,13,387,374,20,-282,5,460,374,20,-17,12,432,324,20,12,13,341,162,20,26,6,314,213,20,-215,7,296,267,20,10,13,314,323,20,-109,4,341,374,20,-140,4,269,213,20,-14,12,254,163,20,-86,13,213,197,20,107,13,251,374,20,-204,10,208,262,20,-78,6,221,324,20,99,9,272,322,20,-201,11",
			"80, 135, 15, 123, 4, 80, 180, 15, -215, 6, 80, 225, 15, 50, 7, 80, 270, 15, -310, 3, 125, 110, 15, 256, 5, 175, 135, 15, -295, 4, 175, 180, 15, 65, 7, 175, 225, 15, -140, 8, 175, 270, 15, 250, 9, 125, 210, 15, -345, 3, 235, 110, 15, 123, 4, 235, 155, 15, -123, 5, 235, 200, 15, -45, 3, 235, 245, 15, 198, 6, 270, 110, 15, 345, 4, 270, 200, 15, -270, 5, 305, 155, 15, -156, 3, 365, 155, 15, 265, 3, 365, 200, 15, -189, 4, 400, 110, 15, -54, 7, 400, 245, 15, 320, 3, 435, 155, 15, -305, 3, 435, 200, 15, 145, 5",
//			{100, 260, 17, 245, 7, /**/115, 215, 17, 310, 8, /**/145, 170, 17, 123, 6, /**/180, 140, 17, 154, 6}
	};
	//#endif
	
	public static String[] editorLevels = null;
	
	public static final String getLevel(int level) {
		if ((level < 0) || (level >= levelsString.length)) {
			return null;
		}
		return levelsString[level];
	}
	
	public static final int MAX_LEVELS = levelsString.length;
	
	//#elifdef SnakeGameLogic || DiceGameLogic
	public static boolean isIn(String level) {
		for (int i = 0; i < levelsString.length; i++) {
			if (level.equals(levelsString[i])) {
				return true;
			}
		}
		return false;
	}
	//#endif
}
